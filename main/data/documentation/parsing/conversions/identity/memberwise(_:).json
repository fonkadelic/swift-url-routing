{"variants":[{"paths":["\/documentation\/parsing\/conversions\/identity\/memberwise(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Conversions\/Identity\/memberwise(_:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"A conversion from a tuple of values into a struct and a struct into a tuple of values, using a"},{"type":"text","text":" "},{"type":"text","text":"memberwise initializer."}],"kind":"symbol","sections":[],"metadata":{"modules":[{"name":"Parsing"}],"roleHeading":"Type Method","title":"memberwise(_:)","role":"symbol","symbolKind":"method","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"memberwise"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Values"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Struct"},{"text":">((","kind":"text"},{"text":"Values","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Struct","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"extendedModule":"Parsing","externalID":"s:7Parsing10ConversionPAAE10memberwiseyAA11ConversionsO10MemberwiseVy_qd__qd_0_Gqd_0_qd__cAIRszr0_lFZ::SYNTHESIZED::s:7Parsing11ConversionsO8IdentityV"},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"memberwise"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Values"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Struct"},{"kind":"text","text":">("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"initializer"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" ("},{"kind":"typeIdentifier","text":"Values"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Struct"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":" "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":" == "},{"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Conversions","kind":"typeIdentifier","text":"Conversions","preciseIdentifier":"s:7Parsing11ConversionsO"},{"kind":"text","text":"."},{"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Conversions\/Memberwise","kind":"typeIdentifier","text":"Memberwise","preciseIdentifier":"s:7Parsing11ConversionsO10MemberwiseV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Values"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Struct"},{"kind":"text","text":">"}]}]},{"content":[{"text":"Return Value","type":"heading","anchor":"return-value","level":2},{"type":"paragraph","inlineContent":[{"text":"A conversion that can embed a tuple of values into a struct, and destructure a","type":"text"},{"text":" ","type":"text"},{"text":"struct back into a tuple of values.","type":"text"}]}],"kind":"content"},{"kind":"parameters","parameters":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A memberwise initializer where "},{"type":"codeVoice","code":"Values"},{"type":"text","text":" directly maps to the memory"},{"type":"text","text":" "},{"type":"text","text":"layout of "},{"type":"codeVoice","code":"Root"},{"type":"text","text":", for example the internal, default initializer that is automatically"},{"type":"text","text":" "},{"type":"text","text":"synthesized for structs."}]}],"name":"initializer"}]},{"content":[{"type":"heading","anchor":"discussion","level":2,"text":"Discussion"},{"inlineContent":[{"type":"text","text":"Useful for transforming the output of a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/ParserPrinter"},{"type":"text","text":" into a struct."}],"type":"paragraph"},{"inlineContent":[{"text":"For example, given a simple ","type":"text"},{"type":"codeVoice","code":"Coordinate"},{"text":" struct, we can build a parser-printer using","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Conversions\/Identity\/memberwise(_:)","type":"reference","isActive":true},{"text":":","type":"text"}],"type":"paragraph"},{"code":["struct Coordinate {","  var x: Double","  var y: Double","}","","let coord = ParsePrint(.memberwise(Coordinate.init(x:y:))) {","  \"(\"","  Double.parser()","  \",\"","  Double.parser()","  \")\"","}","","try coord.parse(\"(1,-2)\")           \/\/ Coordinate(x: 1.0, y: -2.0)","coord.print(.init(x: -5, y: 10))  \/\/ \"(-5.0,10.0)\""],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"To transform the output of a ","type":"text"},{"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/ParserPrinter","type":"reference","isActive":true},{"text":" into an enum, see ","type":"text"},{"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Conversion\/case(_:)-4j2n7","type":"reference","isActive":true},{"text":".","type":"text"}],"type":"paragraph"},{"type":"heading","anchor":"Careful-usage","level":2,"text":"Careful usage"},{"inlineContent":[{"text":"This conversion works by using the memberwise initializer you supply to ","type":"text"},{"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Conversions\/Identity\/memberwise(_:)","type":"reference","isActive":true},{"text":" in","type":"text"},{"text":" ","type":"text"},{"text":"order to turn tuples into a struct, and it uses ","type":"text"},{"type":"codeVoice","code":"unsafeBitcast"},{"text":" to turn the struct back into","type":"text"},{"text":" ","type":"text"},{"text":"a tuple. Because of this, it is ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"not"}]},{"text":" valid to use ","type":"text"},{"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Conversions\/Identity\/memberwise(_:)","type":"reference","isActive":true},{"text":" with anything other than","type":"text"},{"text":" ","type":"text"},{"text":"the default synthesized memberwise initializer that structs are given for free by the compiler","type":"text"},{"text":" ","type":"text"},{"text":"as that function most correctly maps the data inside a struct to its tuple representation,","type":"text"},{"text":" ","type":"text"},{"text":"even enforcing the order of the fields.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"If you alter the initializer in any way you run the risk of introducing subtle bugs into","type":"text"},{"text":" ","type":"text"},{"text":"your parser-printer and potentially causing crashes.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"For example, suppose we provided an alternative initializer to ","type":"text"},{"type":"codeVoice","code":"Coordinate"},{"text":" above that","type":"text"},{"text":" ","type":"text"},{"text":"allowed you to create a coordinate from a radius and angle measured in degrees:","type":"text"}],"type":"paragraph"},{"code":["extension Coordinate {","  init(radius: Double, angle: Double) {","    self.x = radius * cos(angle * Double.pi \/ 180)","    self.y = radius * sin(angle * Double.pi \/ 180)","  }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"This may seem innocent enough, but it is ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"not","type":"text"}]},{"text":" safe to use this initializer with","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Conversions\/Identity\/memberwise(_:)","type":"reference","isActive":true},{"text":". The following parser-printer will correctly parse a radius and angle into","type":"text"},{"text":" ","type":"text"},{"text":"an x\/y coordinate:","type":"text"}],"type":"paragraph"},{"code":["let coord = ParserPrint(.memberwise(Coordinate.init(radius:angle:))) {","  Double.parser()","  \" @ \"","  Double.parser()","  \"°\"","}","","try coord.parse(\"1 @ 90°\")  \/\/ (x: 0, y: 1)"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"However, printing a coordinate will "},{"type":"emphasis","inlineContent":[{"type":"text","text":"not"}]},{"type":"text","text":" convert it back into a radius and angle, and"},{"type":"text","text":" "},{"type":"text","text":"instead will erroneously use (0, 1) as the radius and angle:"}],"type":"paragraph"},{"code":["try coord.print(.init(x: 0, y: 1))  \/\/ \"0 @ 1°\""],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"This means this parser-printer does not round trip (see ","type":"text"},{"text":"doc:Roundtripping","type":"text"},{"text":"), ","type":"text"},{"inlineContent":[{"text":"i.e.","type":"text"}],"type":"emphasis"},{"text":" if we","type":"text"},{"text":" ","type":"text"},{"text":"parse and input and then print that output we do not get back the original input we started","type":"text"},{"text":" ","type":"text"},{"text":"with:","type":"text"}],"type":"paragraph"},{"code":["try coord.print(try coord.parse(\"1 @ 90°\")) == \"1 @ 90°\"  \/\/ ❌"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Further, it is possible to provide a custom initializer for a type that either re-orders the","type":"text"},{"text":" ","type":"text"},{"text":"fields or add\/removes fields, both of which will cause the underlying ","type":"text"},{"type":"codeVoice","code":"unsafeBitCast"},{"text":" to","type":"text"},{"text":" ","type":"text"},{"text":"crash. For example, we could have a ","type":"text"},{"type":"codeVoice","code":"User"},{"text":" struct that holds onto a string for the bio and an","type":"text"},{"text":" ","type":"text"},{"text":"integer for the id, and provide a custom initializer so that the id is provided first:","type":"text"}],"type":"paragraph"},{"code":["struct User {","  let bio: String","  let id: Int","  init(id: Int, bio: String) {","    self.bio = bio","    self.id = id","  }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"However, using this initializer with ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Conversions\/Identity\/memberwise(_:)"},{"text":" will cause printing to crash because","type":"text"},{"text":" ","type":"text"},{"text":"it will try to bitcast a ","type":"text"},{"type":"codeVoice","code":"(String, Int)"},{"text":" struct into a ","type":"text"},{"type":"codeVoice","code":"(Int, String)"},{"text":" tuple:","type":"text"}],"type":"paragraph"},{"code":["let user = ParsePrint(.memberwise(User.init(id:bio:))) {","  Int.parser()","  \",\"","  Rest()","}","","try user.print(.init(id: 42, bio: \"Hello world!\"))  \/\/ ❌"],"type":"codeListing","syntax":"swift"}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing","doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Conversions","doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Conversions\/Identity","doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Conversions\/Identity\/Conversion-Implementations"]]},"schemaVersion":{"minor":3,"patch":0,"major":0},"references":{"doc://co.pointfree.URLRouting/documentation/Parsing/Parser":{"kind":"symbol","abstract":[{"text":"Declares a type that can incrementally parse an ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" value from an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value.","type":"text"}],"type":"topic","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Parser","url":"\/documentation\/parsing\/parser","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"text":"Parser","kind":"identifier"}],"title":"Parser"},"doc://co.pointfree.URLRouting/documentation/Parsing":{"kind":"symbol","abstract":[],"type":"topic","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing","url":"\/documentation\/parsing","role":"collection","title":"Parsing"},"doc://co.pointfree.URLRouting/documentation/Parsing/Conversions/Memberwise":{"url":"\/documentation\/parsing\/conversions\/memberwise","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Memberwise","kind":"identifier"}],"navigatorTitle":[{"text":"Memberwise","kind":"identifier"}],"abstract":[],"role":"symbol","type":"topic","title":"Conversions.Memberwise","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Conversions\/Memberwise","kind":"symbol"},"doc://co.pointfree.URLRouting/documentation/Parsing/Conversions/Identity":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Identity"}],"url":"\/documentation\/parsing\/conversions\/identity","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Conversions\/Identity","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Identity"}],"title":"Conversions.Identity","abstract":[]},"doc://co.pointfree.URLRouting/documentation/Parsing/Conversion/case(_:)-4j2n7":{"type":"topic","title":"case(_:)","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Conversion\/case(_:)-4j2n7","kind":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"`case`","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Values","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Enum","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"Values","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Enum","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"url":"\/documentation\/parsing\/conversion\/case(_:)-4j2n7","role":"symbol","abstract":[{"text":"Converts the associated values of an enum case into the case, and an enum case into its","type":"text"},{"text":" ","type":"text"},{"text":"associated values.","type":"text"}]},"doc://co.pointfree.URLRouting/documentation/Parsing/Conversions/Identity/Conversion-Implementations":{"abstract":[],"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Conversions\/Identity\/Conversion-Implementations","type":"topic","title":"Conversion Implementations","kind":"article","url":"\/documentation\/parsing\/conversions\/identity\/conversion-implementations","role":"collectionGroup"},"doc://co.pointfree.URLRouting/documentation/Parsing/Conversions":{"title":"Conversions","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"Conversions"}],"type":"topic","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Conversions","url":"\/documentation\/parsing\/conversions","kind":"symbol","abstract":[{"type":"text","text":"A namespace for types that serve as conversions."}],"navigatorTitle":[{"kind":"identifier","text":"Conversions"}],"role":"symbol"},"doc://co.pointfree.URLRouting/documentation/Parsing/ParserPrinter":{"navigatorTitle":[{"text":"ParserPrinter","kind":"identifier"}],"url":"\/documentation\/parsing\/parserprinter","abstract":[{"type":"text","text":"A "},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Parser"},{"type":"text","text":" that can incrementally “print” an output value back into an input."}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"ParserPrinter","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/ParserPrinter","type":"topic","title":"ParserPrinter","kind":"symbol"},"doc://co.pointfree.URLRouting/documentation/Parsing/Conversions/Identity/memberwise(_:)":{"title":"memberwise(_:)","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Conversions\/Identity\/memberwise(_:)","abstract":[{"type":"text","text":"A conversion from a tuple of values into a struct and a struct into a tuple of values, using a"},{"type":"text","text":" "},{"type":"text","text":"memberwise initializer."}],"role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"memberwise"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Values"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Struct"},{"kind":"text","text":">(("},{"text":"Values","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Struct","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"type":"topic","kind":"symbol","url":"\/documentation\/parsing\/conversions\/identity\/memberwise(_:)"}}}