{"schemaVersion":{"major":0,"minor":3,"patch":0},"hierarchy":{"paths":[["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing"]]},"metadata":{"role":"symbol","title":"OneOf","externalID":"s:7Parsing5OneOfV","modules":[{"name":"Parsing"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"OneOf"}],"navigatorTitle":[{"kind":"identifier","text":"OneOf"}],"roleHeading":"Structure","symbolKind":"struct"},"relationshipsSections":[{"title":"Conforms To","type":"conformsTo","kind":"relationships","identifiers":["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/ParserPrinter"]}],"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf\/init(_:)"]},{"title":"Instance Properties","identifiers":["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf\/parsers"]},{"title":"Instance Methods","identifiers":["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf\/parse(_:)"]},{"generated":true,"title":"Default Implementations","identifiers":["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf\/Parser-Implementations","doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf\/ParserPrinter-Implementations"]}],"sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"OneOf"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Parsers"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Parsers"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Parsing6ParserP","text":"Parser","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Parser"}],"languages":["swift"],"platforms":["Linux"]}]},{"kind":"content","content":[{"text":"Overview","level":2,"type":"heading","anchor":"overview"},{"inlineContent":[{"text":"Use this parser to list out a number of parsers in a ","type":"text"},{"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOfBuilder","isActive":true,"type":"reference"},{"text":" result builder block.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The following example uses "},{"type":"reference","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf","isActive":true},{"type":"text","text":" to parse an enum value. To do so, it spells out a list of"},{"type":"text","text":" "},{"text":"parsers to ","type":"text"},{"code":"OneOf","type":"codeVoice"},{"text":", one for each case:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["enum Currency { case eur, gbp, usd }","","let currency = OneOf {","  \"€\".map { Currency.eur }","  \"£\".map { Currency.gbp }","  \"$\".map { Currency.usd }","}"]},{"inlineContent":[{"text":"This parser fails if every parser inside fails:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["var input = \"London, Hello!\"[...]","try OneOf { \"New York\"; \"Berlin\" }.parse(&input)","","\/\/ error: multiple failures occurred","\/\/","\/\/ error: unexpected input","\/\/  --> input:1:1","\/\/ 1 | London, Hello!","\/\/   | ^ expected \"New York\"","\/\/   | ^ expected \"Berlin\""]},{"inlineContent":[{"type":"text","text":"If you are parsing input that should coalesce into some default, avoid using a final "},{"type":"reference","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Always","isActive":true},{"type":"text","text":" "},{"type":"text","text":"parser, and instead opt for a trailing "},{"type":"reference","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf\/replaceError(with:)","isActive":true},{"type":"text","text":", which returns a parser that"},{"type":"text","text":" "},{"type":"text","text":"cannot fail:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["enum Currency { case eur, gbp, usd, unknown }","","let currency = OneOf {","  \"€\".map { Currency.eur }","  \"£\".map { Currency.gbp }","  \"$\".map { Currency.usd }","}",".replaceError(with: Currency.unknown)","","currency.parse(\"$\")  \/\/ Currency.usd","currency.parse(\"฿\")  \/\/ Currency.unknown"]},{"text":"Specificity","level":2,"type":"heading","anchor":"Specificity"},{"inlineContent":[{"type":"text","text":"The order of the parsers in the above "},{"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf","type":"reference","isActive":true},{"type":"text","text":" does not matter because each of “€”, “£” and “$”"},{"type":"text","text":" "},{"type":"text","text":"are mutually exclusive, i.e. at most one will succeed on any given input."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"However, that is not always true, and when the parsers are not mutually exclusive (i.e. multiple"},{"type":"text","text":" "},{"type":"text","text":"can succeed on a given input) you must order them from most specific to least specific. That is,"},{"type":"text","text":" "},{"type":"text","text":"the first parser should succeed on the fewest number of inputs and the last parser should"},{"type":"text","text":" "},{"type":"text","text":"succeed on the most number of inputs."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For example, suppose you wanted to parse a simple CSV format into a doubly-nested array of"},{"type":"text","text":" "},{"type":"text","text":"strings, and the fields in the CSV are allowed to contain commas themselves as long as they"},{"type":"text","text":" "},{"type":"text","text":"are quoted:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let input = #\"\"\"","lastName,firstName","McBlob,Blob","\"McBlob, Esq.\",Blob Jr.","\"McBlob, MD\",Blob Sr.","\"\"\"#"]},{"inlineContent":[{"type":"text","text":"Here we have a list of last and first names separated by a comma, and some of the last names are"},{"type":"text","text":" "},{"type":"text","text":"quoted because they contain commas."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"In order to safely parse this we must first try parsing a field as a quoted field, and then only"},{"type":"text","text":" "},{"type":"text","text":"if that fails we can parse a plain field that takes everything up until the next comma or"},{"type":"text","text":" "},{"type":"text","text":"newline:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let quotedField = Parse {","  \"\\\"\"","  Prefix { $0 != \"\\\"\" }","  \"\\\"\"","}","let plainField = Prefix { $0 != \",\" && $0 != \"\\n\" }","","let field = OneOf {","  quotedField","  plainField","}"]},{"inlineContent":[{"text":"Then we can parse many fields to form an array of fields making up a line, and then parse many","type":"text"},{"text":" ","type":"text"},{"text":"lines to make up a full, doubly-nested array for the CSV:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let line = Many { field } separator: { \",\" }","let csv = Many { line } separator: { \"\\n\" }"]},{"inlineContent":[{"type":"text","text":"Running this parser on the input shows that it properly isolates each field of the CSV, even"},{"type":"text","text":" "},{"type":"text","text":"fields that are quoted and contain a comma:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["XCTAssertEqual(","  try csv.parse(input),","  [","    [\"lastName\", \"firstName\"],","    [\"McBlob\", \"Blob\"],","    [\"McBlob, Esq.\", \"Blob Jr.\"],","    [\"McBlob, MD\", \"Blob Sr.\"],","  ]",")","\/\/ ✅"]},{"inlineContent":[{"text":"The reason this parser works is because the ","type":"text"},{"type":"codeVoice","code":"quotedField"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"plainField"},{"text":" parsers are listed in","type":"text"},{"text":" ","type":"text"},{"text":"a very specific order inside the ","type":"text"},{"type":"codeVoice","code":"OneOf"},{"text":":","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let field = OneOf {","  quotedField","  plainField","}"]},{"inlineContent":[{"text":"The ","type":"text"},{"code":"quotedField","type":"codeVoice"},{"text":" parser is a ","type":"text"},{"inlineContent":[{"text":"more","type":"text"}],"type":"emphasis"},{"text":" specific parser in that it will succeed on fewer inputs","type":"text"},{"text":" ","type":"text"},{"text":"than the ","type":"text"},{"code":"plainField","type":"codeVoice"},{"text":" parser does. For example:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["try quotedField.parse(\"Blob Jr.\") \/\/ ❌","try plainField.parse(\"Blob Jr.\")  \/\/ ✅"]},{"inlineContent":[{"type":"text","text":"Whereas the "},{"type":"codeVoice","code":"plainField"},{"type":"text","text":" parser will happily succeed on anything the "},{"type":"codeVoice","code":"quotedField"},{"type":"text","text":" parser will"},{"type":"text","text":" "},{"type":"text","text":"succeed on:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["try quotedField.parse(\"\\\"Blob, Esq\\\"\") \/\/ ✅","try plainField.parse(\"\\\"Blob, Esq\\\"\")  \/\/ ✅"]},{"inlineContent":[{"type":"text","text":"For this reason the "},{"code":"quotedField","type":"codeVoice"},{"type":"text","text":" parser must be listed first so that it can try its logic"},{"type":"text","text":" "},{"type":"text","text":"first, which succeeds less frequently, before then trying the "},{"code":"plainField","type":"codeVoice"},{"type":"text","text":" parser, which"},{"type":"text","text":" "},{"type":"text","text":"succeeds more often."}],"type":"paragraph"},{"text":"Backtracking","level":2,"type":"heading","anchor":"Backtracking"},{"inlineContent":[{"text":"The ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf"},{"text":" parser is the primary tool for introducing backtracking into your parsers,","type":"text"},{"text":" ","type":"text"},{"text":"which means to undo the consumption of a parser when it fails. For more information, see the","type":"text"},{"text":" ","type":"text"},{"text":"article ","type":"text"},{"text":"doc:Backtracking","type":"text"},{"text":".","type":"text"}],"type":"paragraph"}]}],"identifier":{"url":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf","interfaceLanguage":"swift"},"variants":[{"paths":["\/documentation\/parsing\/oneof"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","abstract":[{"type":"text","text":"A parser that attempts to run a number of parsers till one succeeds."}],"references":{"doc://co.pointfree.URLRouting/documentation/Parsing/ParserPrinter":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParserPrinter"}],"title":"ParserPrinter","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/ParserPrinter","conformance":{"constraints":[{"type":"codeVoice","code":"Parsers"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"ParserPrinter"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"kind":"symbol","type":"topic","url":"\/documentation\/parsing\/parserprinter","role":"symbol","abstract":[{"type":"text","text":"A "},{"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Parser","type":"reference","isActive":true},{"type":"text","text":" that can incrementally “print” an output value back into an input."}],"navigatorTitle":[{"kind":"identifier","text":"ParserPrinter"}]},"doc://co.pointfree.URLRouting/documentation/Parsing/OneOf/init(_:)":{"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf\/init(_:)","abstract":[],"type":"topic","fragments":[{"text":"init","kind":"identifier"},{"text":"(() -> ","kind":"text"},{"text":"Parsers","kind":"typeIdentifier"},{"text":")","kind":"text"}],"kind":"symbol","role":"symbol","url":"\/documentation\/parsing\/oneof\/init(_:)","title":"init(_:)"},"doc://co.pointfree.URLRouting/documentation/Parsing/Parser":{"kind":"symbol","abstract":[{"text":"Declares a type that can incrementally parse an ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" value from an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value.","type":"text"}],"type":"topic","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Parser","url":"\/documentation\/parsing\/parser","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"text":"Parser","kind":"identifier"}],"title":"Parser"},"doc://co.pointfree.URLRouting/documentation/Parsing/OneOf/ParserPrinter-Implementations":{"title":"ParserPrinter Implementations","role":"collectionGroup","url":"\/documentation\/parsing\/oneof\/parserprinter-implementations","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf\/ParserPrinter-Implementations","abstract":[],"kind":"article","type":"topic"},"doc://co.pointfree.URLRouting/documentation/Parsing/OneOf/replaceError(with:)":{"kind":"symbol","abstract":[{"text":"A parser that replaces its error with a provided output.","type":"text"}],"url":"\/documentation\/parsing\/oneof\/replaceerror(with:)","title":"replaceError(with:)","type":"topic","role":"symbol","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf\/replaceError(with:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"replaceError","kind":"identifier"},{"text":"(","kind":"text"},{"text":"with","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Parsers","preciseIdentifier":"s:7Parsing7ParsersO","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"ReplaceError","preciseIdentifier":"s:7Parsing7ParsersO12ReplaceErrorV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}]},"doc://co.pointfree.URLRouting/documentation/Parsing/OneOf":{"title":"OneOf","navigatorTitle":[{"kind":"identifier","text":"OneOf"}],"role":"symbol","url":"\/documentation\/parsing\/oneof","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"OneOf"}],"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf","abstract":[{"type":"text","text":"A parser that attempts to run a number of parsers till one succeeds."}],"kind":"symbol","type":"topic"},"doc://co.pointfree.URLRouting/documentation/Parsing/OneOf/parsers":{"fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"parsers"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Parsers"}],"abstract":[],"url":"\/documentation\/parsing\/oneof\/parsers","title":"parsers","type":"topic","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf\/parsers","role":"symbol","kind":"symbol"},"doc://co.pointfree.URLRouting/documentation/Parsing":{"kind":"symbol","abstract":[],"type":"topic","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing","url":"\/documentation\/parsing","role":"collection","title":"Parsing"},"doc://co.pointfree.URLRouting/documentation/Parsing/OneOfBuilder":{"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"OneOfBuilder","kind":"identifier"}],"title":"OneOfBuilder","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOfBuilder","kind":"symbol","role":"symbol","url":"\/documentation\/parsing\/oneofbuilder","navigatorTitle":[{"text":"OneOfBuilder","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"A custom parameter attribute that constructs parsers from closures. The constructed parser"},{"type":"text","text":" "},{"type":"text","text":"runs each parser in the closure, one after another, till one succeeds with an output."}]},"doc://co.pointfree.URLRouting/documentation/Parsing/Always":{"kind":"symbol","title":"Always","url":"\/documentation\/parsing\/always","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Always"}],"navigatorTitle":[{"kind":"identifier","text":"Always"}],"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Always","abstract":[{"type":"text","text":"A parser that always succeeds with the given value, and does not consume any input."}]},"doc://co.pointfree.URLRouting/documentation/Parsing/OneOf/Parser-Implementations":{"url":"\/documentation\/parsing\/oneof\/parser-implementations","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf\/Parser-Implementations","kind":"article","role":"collectionGroup","title":"Parser Implementations","type":"topic","abstract":[]},"doc://co.pointfree.URLRouting/documentation/Parsing/OneOf/parse(_:)":{"type":"topic","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf\/parse(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"parse","kind":"identifier"},{"kind":"text","text":"("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Parsers"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Parsers"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"}],"kind":"symbol","url":"\/documentation\/parsing\/oneof\/parse(_:)","title":"parse(_:)","role":"symbol","abstract":[{"type":"text","text":"Attempts to parse a nebulous piece of data into something more well-structured. Typically"},{"type":"text","text":" "},{"text":"you only call this from other ","type":"text"},{"type":"codeVoice","code":"Parser"},{"text":" conformances, not when you want to parse a concrete","type":"text"},{"text":" ","type":"text"},{"text":"input.","type":"text"}]}}}