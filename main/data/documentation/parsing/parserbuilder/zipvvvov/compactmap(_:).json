{"identifier":{"url":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/ParserBuilder\/ZipVVVOV\/compactMap(_:)","interfaceLanguage":"swift"},"primaryContentSections":[{"declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"compactMap","kind":"identifier"},{"text":"<","kind":"text"},{"text":"NewOutput","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"transform","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"@escaping","kind":"keyword"},{"text":" (","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"NewOutput","kind":"typeIdentifier"},{"text":"?) -> ","kind":"text"},{"text":"Parsers","preciseIdentifier":"s:7Parsing7ParsersO","kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Parsers"},{"text":".","kind":"text"},{"text":"CompactMap","preciseIdentifier":"s:7Parsing7ParsersO10CompactMapV","kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Parsers\/CompactMap"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"NewOutput","kind":"typeIdentifier"},{"text":">","kind":"text"}],"languages":["swift"],"platforms":["Linux"]}],"kind":"declarations"},{"kind":"content","content":[{"level":2,"text":"Return Value","anchor":"return-value","type":"heading"},{"inlineContent":[{"type":"text","text":"A parser that outputs the non-"},{"code":"nil","type":"codeVoice"},{"type":"text","text":" result of calling the given transformation"},{"type":"text","text":" "},{"type":"text","text":"with the output of this parser."}],"type":"paragraph"}]},{"kind":"parameters","parameters":[{"name":"transform","content":[{"inlineContent":[{"type":"text","text":"A closure that accepts output of this parser as its argument and"},{"type":"text","text":" "},{"type":"text","text":"returns an optional value."}],"type":"paragraph"}]}]},{"kind":"content","content":[{"type":"heading","level":2,"anchor":"discussion","text":"Discussion"},{"inlineContent":[{"type":"text","text":"This method is similar to "},{"type":"codeVoice","code":"Sequence.compactMap"},{"type":"text","text":" in the Swift standard library, as well as"},{"type":"text","text":" "},{"type":"codeVoice","code":"Publisher.compactMap"},{"type":"text","text":" in the Combine framework."}],"type":"paragraph"},{"type":"codeListing","code":["let evenParser = Int.parser().compactMap { $0.isMultiple(of: 2) ? $0 : nil }","","var input = \"124 hello world\"[...]","try evenParser.parse(&input)  \/\/ 124","input                         \/\/ \" hello world\""],"syntax":"swift"},{"inlineContent":[{"text":"This parser fails when the provided closure returns ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":". For example, the following parser tries","type":"text"},{"text":" ","type":"text"},{"text":"to convert two characters into a hex digit, but fails to do so because ","type":"text"},{"code":"\"GG\"","type":"codeVoice"},{"text":" is not a valid","type":"text"},{"text":" ","type":"text"},{"text":"hex number:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["var input = \"GG0000\"[...]","let hex = try Prefix(2).compactMap { Int(String($0), radix: 16) }.parse(&input)","\/\/ error: failed to process \"Int\" from \"GG\"","\/\/  --> input:1:1-2","\/\/ 1 | GG0000","\/\/   | ^^"],"syntax":"swift"},{"type":"heading","level":2,"anchor":"Printability","text":"Printability"},{"inlineContent":[{"type":"codeVoice","code":"Parser.compactMap"},{"type":"text","text":" is "},{"type":"emphasis","inlineContent":[{"text":"not","type":"text"}]},{"type":"text","text":" printable, as a failable transform operation to some new output"},{"type":"text","text":" "},{"type":"text","text":"does not provide enough information to perform a transformation from that new output back to"},{"type":"text","text":" "},{"type":"text","text":"the old."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"If you are building a parser-printer, avoid uses of "},{"code":"compactMap","type":"codeVoice"},{"type":"text","text":" and instead use"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Parser\/map(_:)-18m9d"},{"type":"text","text":" with a failable "},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Conversion"},{"type":"text","text":"."}],"type":"paragraph"}]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"metadata":{"roleHeading":"Instance Method","title":"compactMap(_:)","modules":[{"name":"Parsing"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"compactMap","kind":"identifier"},{"text":"<","kind":"text"},{"text":"NewOutput","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"NewOutput","kind":"typeIdentifier"},{"text":"?) -> ","kind":"text"},{"text":"Parsers","preciseIdentifier":"s:7Parsing7ParsersO","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"CompactMap","preciseIdentifier":"s:7Parsing7ParsersO10CompactMapV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"NewOutput","kind":"typeIdentifier"},{"text":">","kind":"text"}],"role":"symbol","extendedModule":"Parsing","externalID":"s:7Parsing6ParserPAAE10compactMapyAA7ParsersO07CompactD0Vy_xqd__Gqd__Sg6OutputQzclF::SYNTHESIZED::s:7Parsing13ParserBuilderO8ZipVVVOVV","symbolKind":"method"},"abstract":[{"type":"text","text":"Returns a parser that outputs the non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" result of calling the given closure with the"},{"type":"text","text":" "},{"type":"text","text":"output of this parser."}],"sections":[],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing","doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/ParserBuilder","doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/ParserBuilder\/ZipVVVOV","doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/ParserBuilder\/ZipVVVOV\/Parser-Implementations"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/parserbuilder\/zipvvvov\/compactmap(_:)"]}],"references":{"doc://co.pointfree.URLRouting/documentation/Parsing/ParserBuilder/ZipVVVOV/compactMap(_:)":{"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/ParserBuilder\/ZipVVVOV\/compactMap(_:)","title":"compactMap(_:)","url":"\/documentation\/parsing\/parserbuilder\/zipvvvov\/compactmap(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"compactMap","kind":"identifier"},{"text":"<","kind":"text"},{"text":"NewOutput","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"NewOutput","kind":"typeIdentifier"},{"text":"?) -> ","kind":"text"},{"text":"Parsers","preciseIdentifier":"s:7Parsing7ParsersO","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"CompactMap","preciseIdentifier":"s:7Parsing7ParsersO10CompactMapV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"NewOutput","kind":"typeIdentifier"},{"text":">","kind":"text"}],"role":"symbol","abstract":[{"type":"text","text":"Returns a parser that outputs the non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" result of calling the given closure with the"},{"type":"text","text":" "},{"text":"output of this parser.","type":"text"}],"kind":"symbol","type":"topic"},"doc://co.pointfree.URLRouting/documentation/Parsing/Parsers":{"kind":"symbol","abstract":[{"text":"A namespace for types that serve as parsers.","type":"text"}],"type":"topic","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Parsers","url":"\/documentation\/parsing\/parsers","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parsers","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"text":"Parsers","kind":"identifier"}],"title":"Parsers"},"doc://co.pointfree.URLRouting/documentation/Parsing/ParserBuilder/ZipVVVOV/Parser-Implementations":{"kind":"article","role":"collectionGroup","type":"topic","title":"Parser Implementations","url":"\/documentation\/parsing\/parserbuilder\/zipvvvov\/parser-implementations","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/ParserBuilder\/ZipVVVOV\/Parser-Implementations","abstract":[]},"doc://co.pointfree.URLRouting/documentation/Parsing/Parser/map(_:)-18m9d":{"kind":"symbol","abstract":[{"text":"Returns a parser-printer that transforms the output of this parser with a given conversion.","type":"text"}],"type":"topic","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Parser\/map(_:)-18m9d","url":"\/documentation\/parsing\/parser\/map(_:)-18m9d","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"map","kind":"identifier"},{"text":"<","kind":"text"},{"text":"C","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"C","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Parsers","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO"},{"text":".","kind":"text"},{"text":"MapConversion","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO13MapConversionV"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"C","kind":"typeIdentifier"},{"text":">","kind":"text"}],"role":"symbol","title":"map(_:)"},"doc://co.pointfree.URLRouting/documentation/Parsing/ParserBuilder/ZipVVVOV":{"abstract":[],"url":"\/documentation\/parsing\/parserbuilder\/zipvvvov","title":"ParserBuilder.ZipVVVOV","type":"topic","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/ParserBuilder\/ZipVVVOV","navigatorTitle":[{"text":"ZipVVVOV","kind":"identifier"}],"kind":"symbol","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ZipVVVOV","kind":"identifier"}]},"doc://co.pointfree.URLRouting/documentation/Parsing/ParserBuilder":{"kind":"symbol","abstract":[{"text":"A custom parameter attribute that constructs parsers from closures. The constructed parser","type":"text"},{"text":" ","type":"text"},{"text":"runs a number of parsers, one after the other, and accumulates their outputs.","type":"text"}],"type":"topic","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/ParserBuilder","url":"\/documentation\/parsing\/parserbuilder","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ParserBuilder","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"text":"ParserBuilder","kind":"identifier"}],"title":"ParserBuilder"},"doc://co.pointfree.URLRouting/documentation/Parsing/Conversion":{"kind":"symbol","abstract":[{"text":"Declares a type that can transform an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value into an ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" value ","type":"text"},{"inlineContent":[{"type":"text","text":"and"}],"type":"emphasis"},{"text":" transform an","type":"text"},{"text":" ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" value back into an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value.","type":"text"}],"type":"topic","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Conversion","url":"\/documentation\/parsing\/conversion","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Conversion","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"text":"Conversion","kind":"identifier"}],"title":"Conversion"},"doc://co.pointfree.URLRouting/documentation/Parsing/Parsers/CompactMap":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"CompactMap"}],"title":"Parsers.CompactMap","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Parsers\/CompactMap","kind":"symbol","role":"symbol","url":"\/documentation\/parsing\/parsers\/compactmap","navigatorTitle":[{"kind":"identifier","text":"CompactMap"}],"type":"topic","abstract":[{"text":"A parser that outputs the non-","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" result of calling the given transformation with the output"},{"type":"text","text":" "},{"type":"text","text":"of its upstream parser."}]},"doc://co.pointfree.URLRouting/documentation/Parsing":{"kind":"symbol","abstract":[],"type":"topic","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing","url":"\/documentation\/parsing","role":"collection","title":"Parsing"}}}