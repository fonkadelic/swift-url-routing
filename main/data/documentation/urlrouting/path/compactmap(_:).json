{"identifier":{"url":"doc:\/\/co.pointfree.URLRouting\/documentation\/URLRouting\/Path\/compactMap(_:)","interfaceLanguage":"swift"},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"compactMap","kind":"identifier"},{"text":"<","kind":"text"},{"text":"NewOutput","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"transform","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"@escaping","kind":"keyword"},{"text":" (","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"NewOutput","kind":"typeIdentifier"},{"text":"?) -> ","kind":"text"},{"preciseIdentifier":"s:7Parsing7ParsersO","text":"Parsers","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Parsers","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:7Parsing7ParsersO10CompactMapV","text":"CompactMap","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Parsers\/CompactMap","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"NewOutput","kind":"typeIdentifier"},{"text":">","kind":"text"}],"platforms":["Linux"],"languages":["swift"]}]},{"kind":"content","content":[{"text":"Return Value","type":"heading","level":2,"anchor":"return-value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A parser that outputs the non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" result of calling the given transformation"},{"type":"text","text":" "},{"type":"text","text":"with the output of this parser."}]}]},{"kind":"parameters","parameters":[{"content":[{"inlineContent":[{"type":"text","text":"A closure that accepts output of this parser as its argument and"},{"type":"text","text":" "},{"type":"text","text":"returns an optional value."}],"type":"paragraph"}],"name":"transform"}]},{"kind":"content","content":[{"type":"heading","level":2,"text":"Discussion","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"text":"This method is similar to ","type":"text"},{"code":"Sequence.compactMap","type":"codeVoice"},{"text":" in the Swift standard library, as well as","type":"text"},{"text":" ","type":"text"},{"code":"Publisher.compactMap","type":"codeVoice"},{"text":" in the Combine framework.","type":"text"}]},{"type":"codeListing","code":["let evenParser = Int.parser().compactMap { $0.isMultiple(of: 2) ? $0 : nil }","","var input = \"124 hello world\"[...]","try evenParser.parse(&input)  \/\/ 124","input                         \/\/ \" hello world\""],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"This parser fails when the provided closure returns ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":". For example, the following parser tries","type":"text"},{"text":" ","type":"text"},{"text":"to convert two characters into a hex digit, but fails to do so because ","type":"text"},{"code":"\"GG\"","type":"codeVoice"},{"text":" is not a valid","type":"text"},{"text":" ","type":"text"},{"text":"hex number:","type":"text"}]},{"type":"codeListing","code":["var input = \"GG0000\"[...]","let hex = try Prefix(2).compactMap { Int(String($0), radix: 16) }.parse(&input)","\/\/ error: failed to process \"Int\" from \"GG\"","\/\/  --> input:1:1-2","\/\/ 1 | GG0000","\/\/   | ^^"],"syntax":"swift"},{"type":"heading","level":2,"text":"Printability","anchor":"Printability"},{"type":"paragraph","inlineContent":[{"code":"Parser.compactMap","type":"codeVoice"},{"type":"text","text":" is "},{"inlineContent":[{"text":"not","type":"text"}],"type":"emphasis"},{"type":"text","text":" printable, as a failable transform operation to some new output"},{"type":"text","text":" "},{"type":"text","text":"does not provide enough information to perform a transformation from that new output back to"},{"type":"text","text":" "},{"type":"text","text":"the old."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you are building a parser-printer, avoid uses of "},{"code":"compactMap","type":"codeVoice"},{"type":"text","text":" and instead use"},{"type":"text","text":" "},{"code":"Parser\/map(_:)-18m9d","type":"codeVoice"},{"type":"text","text":" with a failable "},{"code":"Conversion","type":"codeVoice"},{"type":"text","text":"."}]}]}],"kind":"symbol","abstract":[{"type":"text","text":"Returns a parser that outputs the non-"},{"code":"nil","type":"codeVoice"},{"type":"text","text":" result of calling the given closure with the"},{"type":"text","text":" "},{"type":"text","text":"output of this parser."}],"sections":[],"metadata":{"extendedModule":"Parsing","modules":[{"name":"URLRouting"}],"title":"compactMap(_:)","symbolKind":"method","roleHeading":"Instance Method","externalID":"s:7Parsing6ParserPAAE10compactMapyAA7ParsersO07CompactD0Vy_xqd__Gqd__Sg6OutputQzclF::SYNTHESIZED::s:10URLRouting4PathV","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"compactMap","kind":"identifier"},{"text":"<","kind":"text"},{"text":"NewOutput","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"NewOutput","kind":"typeIdentifier"},{"text":"?) -> ","kind":"text"},{"preciseIdentifier":"s:7Parsing7ParsersO","text":"Parsers","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:7Parsing7ParsersO10CompactMapV","text":"CompactMap","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"NewOutput","kind":"typeIdentifier"},{"text":">","kind":"text"}],"role":"symbol"},"schemaVersion":{"minor":3,"major":0,"patch":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/urlrouting\/path\/compactmap(_:)"]}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.URLRouting\/documentation\/URLRouting","doc:\/\/co.pointfree.URLRouting\/documentation\/URLRouting\/Path","doc:\/\/co.pointfree.URLRouting\/documentation\/URLRouting\/Path\/Parser-Implementations"]]},"references":{"doc://co.pointfree.URLRouting/documentation/URLRouting/Path":{"kind":"symbol","navigatorTitle":[{"text":"Path","kind":"identifier"}],"title":"Path","role":"symbol","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/URLRouting\/Path","url":"\/documentation\/urlrouting\/path","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Path","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"Parses a requestâ€™s path components."}]},"doc://co.pointfree.URLRouting/documentation/Parsing/Parsers/CompactMap":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"CompactMap"}],"title":"Parsers.CompactMap","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Parsers\/CompactMap","kind":"symbol","role":"symbol","url":"\/documentation\/parsing\/parsers\/compactmap","navigatorTitle":[{"kind":"identifier","text":"CompactMap"}],"type":"topic","abstract":[{"text":"A parser that outputs the non-","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" result of calling the given transformation with the output"},{"type":"text","text":" "},{"type":"text","text":"of its upstream parser."}]},"doc://co.pointfree.URLRouting/documentation/URLRouting/Path/Parser-Implementations":{"kind":"article","title":"Parser Implementations","role":"collectionGroup","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/URLRouting\/Path\/Parser-Implementations","url":"\/documentation\/urlrouting\/path\/parser-implementations","type":"topic","abstract":[]},"doc://co.pointfree.URLRouting/documentation/Parsing/Parsers":{"kind":"symbol","abstract":[{"text":"A namespace for types that serve as parsers.","type":"text"}],"type":"topic","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Parsers","url":"\/documentation\/parsing\/parsers","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parsers","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"text":"Parsers","kind":"identifier"}],"title":"Parsers"},"http://github.com/pointfreeco/swift-parsing":{"identifier":"http:\/\/github.com\/pointfreeco\/swift-parsing","url":"http:\/\/github.com\/pointfreeco\/swift-parsing","titleInlineContent":[{"text":"Parsing","type":"text"}],"title":"Parsing","type":"link"},"doc://co.pointfree.URLRouting/documentation/URLRouting/Path/compactMap(_:)":{"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/URLRouting\/Path\/compactMap(_:)","abstract":[{"text":"Returns a parser that outputs the non-","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" result of calling the given closure with the","type":"text"},{"text":" ","type":"text"},{"text":"output of this parser.","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"compactMap","kind":"identifier"},{"text":"<","kind":"text"},{"text":"NewOutput","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"NewOutput","kind":"typeIdentifier"},{"text":"?) -> ","kind":"text"},{"preciseIdentifier":"s:7Parsing7ParsersO","text":"Parsers","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:7Parsing7ParsersO10CompactMapV","text":"CompactMap","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"NewOutput","kind":"typeIdentifier"},{"text":">","kind":"text"}],"role":"symbol","url":"\/documentation\/urlrouting\/path\/compactmap(_:)","title":"compactMap(_:)","type":"topic","kind":"symbol"},"doc://co.pointfree.URLRouting/documentation/URLRouting":{"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/URLRouting","role":"collection","title":"URLRouting","type":"topic","abstract":[{"text":"A bidirectional URL router with more type safety and less fuss. This library is built with ","type":"text"},{"type":"reference","identifier":"http:\/\/github.com\/pointfreeco\/swift-parsing","isActive":true},{"text":".","type":"text"}],"kind":"symbol","url":"\/documentation\/urlrouting"}}}